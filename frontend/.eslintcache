[{"/Users/j/Desktop/swap-old-stuff/frontend/src/containers/index.js":"1","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/User/UserLogin.js":"2","/Users/j/Desktop/swap-old-stuff/frontend/src/routes.js":"3","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/App.js":"4","/Users/j/Desktop/swap-old-stuff/frontend/src/components/Header.js":"5","/Users/j/Desktop/swap-old-stuff/frontend/src/components/ProductItem.js":"6","/Users/j/Desktop/swap-old-stuff/frontend/src/components/Rating.js":"7","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/Product/ProductDetails.js":"8","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/Product/ProductEdit.js":"9","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/Product/ProductCreate.js":"10","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/Home.js":"11","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/RequestTo.js":"12","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/NotFound.js":"13","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/User/UserProfile.js":"14","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/User/UserRegister.js":"15","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/Product/ProductList.js":"16","/Users/j/Desktop/swap-old-stuff/frontend/src/index.js":"17","/Users/j/Desktop/swap-old-stuff/frontend/src/redux/modules/reducer.js":"18","/Users/j/Desktop/swap-old-stuff/frontend/src/redux/modules/product.js":"19","/Users/j/Desktop/swap-old-stuff/frontend/src/components/Footer.js":"20","/Users/j/Desktop/swap-old-stuff/frontend/src/components/index.js":"21","/Users/j/Desktop/swap-old-stuff/frontend/src/redux/modules/user.js":"22","/Users/j/Desktop/swap-old-stuff/frontend/src/utils/convertTime.js":"23","/Users/j/Desktop/swap-old-stuff/frontend/src/redux/store.js":"24","/Users/j/Desktop/swap-old-stuff/frontend/src/components/CommentBox.js":"25","/Users/j/Desktop/swap-old-stuff/frontend/src/components/SearchBox.js":"26","/Users/j/Desktop/swap-old-stuff/frontend/src/components/TradeModal.js":"27","/Users/j/Desktop/swap-old-stuff/frontend/src/components/ImageBox.js":"28","/Users/j/Desktop/swap-old-stuff/frontend/src/redux/modules/transaction.js":"29","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/TransactionList.js":"30"},{"size":759,"mtime":1609379863169,"results":"31","hashOfConfig":"32"},{"size":2285,"mtime":1608601963851,"results":"33","hashOfConfig":"32"},{"size":1326,"mtime":1609379902232,"results":"34","hashOfConfig":"32"},{"size":443,"mtime":1608226920406,"results":"35","hashOfConfig":"32"},{"size":2654,"mtime":1609329679902,"results":"36","hashOfConfig":"32"},{"size":8329,"mtime":1609331235522,"results":"37","hashOfConfig":"32"},{"size":2767,"mtime":1608858710551,"results":"38","hashOfConfig":"32"},{"size":13034,"mtime":1609335163787,"results":"39","hashOfConfig":"32"},{"size":8020,"mtime":1609270014154,"results":"40","hashOfConfig":"32"},{"size":8853,"mtime":1609269824073,"results":"41","hashOfConfig":"32"},{"size":1066,"mtime":1609328028773,"results":"42","hashOfConfig":"32"},{"size":3240,"mtime":1609270321377,"results":"43","hashOfConfig":"32"},{"size":78,"mtime":1609207361849,"results":"44","hashOfConfig":"32"},{"size":8220,"mtime":1609270134011,"results":"45","hashOfConfig":"32"},{"size":3452,"mtime":1609142141018,"results":"46","hashOfConfig":"32"},{"size":2446,"mtime":1609270234948,"results":"47","hashOfConfig":"32"},{"size":304,"mtime":1608282155387,"results":"48","hashOfConfig":"32"},{"size":197,"mtime":1608535993922,"results":"49","hashOfConfig":"32"},{"size":14948,"mtime":1609252985028,"results":"50","hashOfConfig":"32"},{"size":369,"mtime":1608113148433,"results":"51","hashOfConfig":"32"},{"size":170,"mtime":1608173188820,"results":"52","hashOfConfig":"32"},{"size":6478,"mtime":1609149760889,"results":"53","hashOfConfig":"32"},{"size":672,"mtime":1608794109869,"results":"54","hashOfConfig":"32"},{"size":378,"mtime":1608281899977,"results":"55","hashOfConfig":"32"},{"size":4393,"mtime":1608798592360,"results":"56","hashOfConfig":"32"},{"size":1365,"mtime":1609329799181,"results":"57","hashOfConfig":"32"},{"size":4272,"mtime":1609269500877,"results":"58","hashOfConfig":"32"},{"size":862,"mtime":1609269857827,"results":"59","hashOfConfig":"32"},{"size":1972,"mtime":1609334916983,"results":"60","hashOfConfig":"32"},{"size":3227,"mtime":1609380052064,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"132ux2k",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},"/Users/j/Desktop/swap-old-stuff/frontend/src/containers/index.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/containers/User/UserLogin.js",[],["135","136"],"/Users/j/Desktop/swap-old-stuff/frontend/src/routes.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/containers/App.js",[],["137","138"],"/Users/j/Desktop/swap-old-stuff/frontend/src/components/Header.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/components/ProductItem.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/components/Rating.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/containers/Product/ProductDetails.js",["139"],"import { useEffect, useState } from 'react'\nimport {\n  Alert,\n  Badge,\n  Button,\n  Col,\n  Form,\n  InputGroup,\n  ListGroup,\n  Row,\n  Spinner,\n  Toast,\n} from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link, useParams } from 'react-router-dom'\nimport ImageBox from '../../components/ImageBox'\nimport Rating from '../../components/Rating'\nimport TradeModal from '../../components/TradeModal'\nimport {\n  createComment,\n  CREATE_COMMENT_RESET,\n  fetchDetails,\n} from '../../redux/modules/product'\nimport { createTX } from '../../redux/modules/transaction'\nimport convertTime from '../../utils/convertTime'\n\nexport default function ProductDetails() {\n  const [isLogin, setIsLogin] = useState(false)\n  const { user: userLogin } = useSelector((s) => s.user.userLogin)\n  useEffect(() => {\n    if (!userLogin || !userLogin._id) {\n      setIsLogin(false)\n    } else {\n      setIsLogin(true)\n    }\n  }, [userLogin])\n\n  const [isSeller, setIsSeller] = useState(false)\n  const [text, setText] = useState('')\n  const [show, setShow] = useState(false)\n  const [message, setMessage] = useState(null)\n\n  const { id: productId } = useParams()\n\n  const dispatch = useDispatch()\n  const { error, loading, product } = useSelector(\n    (s) => s.product.productDetails\n  )\n\n  const {\n    _id,\n    numComments,\n    numLikes,\n    numRequests,\n    requestsFrom,\n    title,\n    description,\n    location,\n    image,\n    comments,\n    wishList,\n    user,\n    userName,\n  } = product\n\n  useEffect(() => {\n    if (userLogin && product.user) {\n      userLogin._id === product.user._id\n        ? setIsSeller(true)\n        : setIsSeller(false)\n    }\n  }, [userLogin, product])\n\n  const { success } = useSelector((s) => s.product.createComment)\n\n  const commentHandler = (e) => {\n    e.preventDefault()\n\n    if (!text) {\n      setMessage(\"You can't send empty message!\")\n      setShow(true)\n    } else {\n      const comment = {\n        name: userLogin.name,\n        text: text,\n        user: userLogin._id,\n      }\n      dispatch(createComment(productId, comment, numComments + 1))\n    }\n  }\n  const createTXHandler = ({ buyerItemId, sellerItemId }) => {\n    dispatch(createTX({ buyerItemId, sellerItemId }))\n    // Set Success Message\n  }\n\n  useEffect(() => {\n    dispatch(fetchDetails(productId))\n  }, [dispatch, productId])\n\n  useEffect(() => {\n    if (success) {\n      setText('')\n      dispatch({ type: CREATE_COMMENT_RESET })\n    }\n  }, [dispatch, success])\n\n  return (\n    <>\n      <Link className='btn btn-warning my-2' to='/'>\n        QUAY LẠI\n      </Link>\n      {isSeller && (\n        <Link\n          className='btn btn-success ml-2 my-2'\n          to={`/products/${productId}/edit`}\n        >\n          Chỉnh sửa\n        </Link>\n      )}\n\n      {loading ? (\n        <Spinner animation='border' variant='primary' />\n      ) : error ? (\n        <Alert variant='warning'>{error}</Alert>\n      ) : (\n        <>\n          <div className='heading__title'>CHI TIẾT</div>\n          <Row>\n            <Col lg={4} md={4}>\n              {/* <Image\n                style={{ borderRadius: '1.1em' }}\n                src={`${process.env.REACT_APP_IMAGE_URL_PREFIX}${image}`}\n                alt={title}\n                fluid\n              ></Image> */}\n              <ImageBox image={image} />\n            </Col>\n            <Col lg={5} md={5}>\n              <ListGroup variant='flush'>\n                <ListGroup.Item className='post__title mb-0 py-2'>\n                  {title}\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <span className='post__sub_title'>Địa điểm: </span>\n                  {location}\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <span className='post__sub_title'>Thông tin chi tiết : </span>\n                  {description}\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  Đang có <span className='post__sub_title'>{numRequests}</span>{' '}\n                  người yêu cầu đổi\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <span className='post__sub_title'>Đồ đang cần: </span>\n                  {wishList}\n                </ListGroup.Item>\n              </ListGroup>\n            </Col>\n            <Col lg={3} md={3}>\n              <ListGroup>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>\n                      <span className='post__sub_title'>{`Người bán: ${userName}`}</span>\n                    </Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>\n                      <span className='post__sub_title'>{`Đánh giá: `}</span>\n                      <Rating\n                        value={!user ? 0 : user.rating}\n                        text={` (${!user ? 0 : user.rating}/5)`}\n                      />\n                    </Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col className='mb-2'>\n                      Nhận được{' '}\n                      <span className='post__sub_title'>\n                        {!user ? 0 : user.numFeedback}\n                      </span>{' '}\n                      đánh giá từ{' '}\n                      <span className='post__sub_title'>\n                        {!user ? 0 : user.numSuccessTX}\n                      </span>{' '}\n                      giao dịch thành công.\n                    </Col>\n                  </Row>\n                  {isLogin && !isSeller ? (\n                    <TradeModal\n                      productId={productId}\n                      productImage={image}\n                      productTitle={title}\n                      userId={userLogin._id}\n                    />\n                  ) : (\n                    <></>\n                  )}\n                </ListGroup.Item>\n              </ListGroup>\n            </Col>\n          </Row>\n        </>\n      )}\n      <Row>\n        <Col md={4} lg={5}>\n          <div className='mt-4 heading__sub_title'>BÌNH LUẬN</div>\n\n          {loading ? (\n            <Spinner animation='border' variant='primary' />\n          ) : error ? (\n            <Alert variant='warning'>{error}</Alert>\n          ) : (\n            <>\n              {numComments ? (\n                <ListGroup variant='flush'>\n                  {comments.map((item) => (\n                    <ListGroup.Item key={item._id}>\n                      <Row>\n                        <Col centered xs={8} lg={9} className='pl-1'>\n                          {item.user === user._id ? (\n                            <Badge\n                              pill\n                              variant='warning'\n                              as='span'\n                              className='text-dark font-weight-bold m-0  py-1 px-1 align-baseline'\n                            >\n                              <span className='contain__text_small'>\n                                seller\n                              </span>\n                            </Badge>\n                          ) : (\n                            ''\n                          )}\n                          <span className='post__sub_title ml-1'>\n                            {item.name}:{' '}\n                          </span>\n                          <span>{item.text}</span>\n                        </Col>\n                        <Col as='small' xs={4} lg={3} className='text-right'>\n                          <span className='contain__text_small'>\n                            {convertTime(item.createdAt)}\n                          </span>\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              ) : (\n                <Alert variant='danger'>\n                  There is no comment. Be the first one by type below.\n                </Alert>\n              )}\n            </>\n          )}\n          {!isLogin ? (\n            <>\n              <Alert variant='info'>Please login to comment!</Alert>\n            </>\n          ) : (\n            <>\n              <Toast\n                onClose={() => setShow(false)}\n                show={show}\n                delay={2000}\n                autohide\n              >\n                <Toast.Header>\n                  <strong className='mr-auto'>{message}</strong>\n                </Toast.Header>\n              </Toast>\n              <Form onSubmit={commentHandler}>\n                <InputGroup className='my-2 mr-sm-2'>\n                  <Form.Control\n                    id='comment'\n                    placeholder='Bình luận của bạn ...'\n                    value={text}\n                    onChange={({ target: { value } }) => setText(value)}\n                  />\n                  <Button type='submit' className='btn btn-warning ml-1'>\n                    Gửi\n                  </Button>\n                </InputGroup>\n              </Form>\n            </>\n          )}\n        </Col>\n        {isLogin && isSeller ? (\n          <>\n            <Col md={8} lg={7}>\n              <div className='mt-4 heading__sub_title'>\n                Danh sách yêu cầu đổi\n              </div>\n              {loading ? (\n                <Spinner animation='border' variant='primary' />\n              ) : error ? (\n                <Alert variant='warning'>{error}</Alert>\n              ) : (\n                <>\n                  {numRequests ? (\n                    <>\n                      <Row className='post__sub_title'>\n                        <Col xs={3} md={2}>\n                          Hình ảnh\n                        </Col>\n                        <Col xs={6} md={4}>\n                          Tiêu đề\n                        </Col>\n                        <Col xs={{ order: 'last' }} md={2}>\n                          Địa điểm\n                        </Col>\n                        <Col xs={{ order: 'last' }} md={2}>\n                          Tên\n                        </Col>\n                        <Col xs={3} md={{ order: 'last' }}>\n                          Nhận\n                        </Col>\n                      </Row>\n\n                      {requestsFrom.map((request) => (\n                        <Row className='border-top py-2'>\n                          <Col xs={3} md={2} className='py-2'>\n                            <Link to={`/products/${request.item._id}`}>\n                              <ImageBox\n                                image={request.item.image}\n                                height='60px'\n                              />\n                            </Link>\n                          </Col>\n                          <Col\n                            xs={6}\n                            md={4}\n                            as='small'\n                            className='py-2 post__sub_title'\n                          >\n                            <Link to={`/products/${request.item._id}`}>\n                              {request.item.title}\n                            </Link>\n                          </Col>\n                          <Col\n                            xs={{ order: 'last' }}\n                            md={2}\n                            className='py-2 align-baseline'\n                            as='small'\n                          >\n                            <span>{request.item.location}</span>\n                          </Col>\n                          <Col\n                            xs={{ order: 'last' }}\n                            md={2}\n                            className='py-2 align-baseline post__sub_title'\n                          >\n                            <span>{request.item.userName}</span>\n                          </Col>\n                          <Col\n                            xs={3}\n                            md={{ order: 'last' }}\n                            className='py-2 align-baseline'\n                          >\n                            <Button\n                              size='sm'\n                              variant='secondary'\n                              onClick={() =>\n                                createTXHandler({\n                                  buyerItemId: request.item._id,\n                                  sellerItemId: _id,\n                                })\n                              }\n                            >\n                              OK\n                            </Button>\n                          </Col>\n                        </Row>\n                      ))}\n                    </>\n                  ) : (\n                    <Alert variant='danger'>\n                      Món này chưa có ai yêu cầu đổi.\n                    </Alert>\n                  )}\n                </>\n              )}\n            </Col>\n          </>\n        ) : (\n          ''\n        )}\n      </Row>\n    </>\n  )\n}\n","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/Product/ProductEdit.js",["140","141"],"import Axios from 'axios'\nimport { useEffect, useState } from 'react'\nimport { Button, Col, Form, ListGroup, ProgressBar, Row } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link, useHistory, useParams } from 'react-router-dom'\nimport { Rating } from '../../components'\nimport ImageBox from '../../components/ImageBox'\nimport { fetchDetails, updateProduct } from '../../redux/modules/product'\n\nexport default function ProductEdit() {\n  const { id: productId } = useParams()\n\n  const dispatch = useDispatch()\n  const { error, loading, product } = useSelector(\n    (s) => s.product.productDetails\n  )\n\n  const [percentUpload, setPercentUpload] = useState(null)\n  const [imageUpload, setImageUpload] = useState()\n\n  const [title, setTitle] = useState('')\n  const [description, setDescription] = useState('')\n  const [location, setLocation] = useState('')\n  const [image, setImage] = useState('')\n  const [wishList, setWishList] = useState('')\n\n  const { user: userLogin } = useSelector((s) => s.user.userLogin)\n  const { success } = useSelector((s) => s.product.updateProduct)\n\n  const history = useHistory()\n\n  useEffect(() => {\n    if (!product._id) {\n      dispatch(fetchDetails(productId))\n    } else {\n      setTitle(product.title)\n      setDescription(product.description)\n      setLocation(product.location)\n      setImage(product.image)\n      setWishList(product.wishList)\n    }\n  }, [dispatch, productId, product])\n\n  useEffect(() => {\n    if (success) {\n      history.push(`/products/${productId}`)\n    }\n  }, [success, productId, history])\n\n  const uploadImageHandler = async () => {\n    try {\n      const formData = new FormData()\n      formData.append('file', imageUpload)\n      formData.append('upload_preset', 'sos-product')\n      formData.append('cloud_name', 'longpos')\n\n      const {\n        data: { version, public_id, format },\n      } = await Axios.request({\n        method: 'POST',\n        url: process.env.REACT_APP_CLOUDINARY_URL_UPLOAD,\n        data: formData,\n        onUploadProgress: ({ loaded, total }) => {\n          const per = Math.round((loaded / total) * 100)\n          setPercentUpload(per)\n        },\n      })\n\n      await setImage(`/v${version}/${public_id}.${format}`)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const updateProductHandler = (e) => {\n    e.preventDefault()\n    const newInfo = {\n      _id: productId,\n      title,\n      description,\n      location,\n      image,\n      wishList,\n    }\n    dispatch(updateProduct(newInfo))\n  }\n\n  return (\n    <>\n      <Link className='btn btn-warning my-2' to={`/products/${productId}`}>\n        Quay lại\n      </Link>\n      <Form onSubmit={updateProductHandler}>\n        <h3>Chỉnh sửa</h3>\n        <Row>\n          <Col lg={4} md={4}>\n            {/* <Image\n              style={{ borderRadius: '1.1em' }}\n              src={\n                !image\n                  ? 'https://placeimg.com/300/300/tech'\n                  : `${process.env.REACT_APP_IMAGE_URL_PREFIX}${image}`\n              }\n              alt={title}\n              fluid\n            ></Image> */}\n            <ImageBox image={image} />\n\n            {percentUpload && (\n              <>\n                <ProgressBar\n                  striped\n                  variant='warning'\n                  animated\n                  label={`${percentUpload}%`}\n                  now={percentUpload}\n                  className='mt-2'\n                />\n              </>\n            )}\n          </Col>\n          <Col lg={5} md={5}>\n            <Form.Group controlId='title'>\n              <Form.Label>Tiêu đề</Form.Label>\n              <Form.Control\n                placeholder='Tiêu đề'\n                value={title}\n                onChange={({ target: { value } }) => setTitle(value)}\n              />\n            </Form.Group>\n            <Form.Group controlId='description'>\n              <Form.Label>Chi tiết</Form.Label>\n              <Form.Control\n                placeholder='Chi tiết'\n                value={description}\n                onChange={({ target: { value } }) => setDescription(value)}\n              />\n            </Form.Group>\n\n            <>\n              <Form inline>\n                <Form.File as='small' className='mb-2'>\n                  <Form.File.Input\n                    onChange={({ target: { files } }) => {\n                      setImageUpload(files[0])\n                    }}\n                  />\n                </Form.File>\n                <Button\n                  type='button'\n                  variant='success'\n                  size='sm'\n                  onClick={uploadImageHandler}\n                >\n                  Upload\n                </Button>\n              </Form>\n            </>\n          </Col>\n          <Col lg={3} md={3}>\n            <Form.Group controlId='location'>\n              <Form.Label>Địa điểm</Form.Label>\n              <Form.Control\n                placeholder='Địa điểm'\n                value={location}\n                onChange={({ target: { value } }) => setLocation(value)}\n              />\n            </Form.Group>\n            <Form.Group controlId='wishList'>\n              <Form.Label>Đồ đang cần</Form.Label>\n              <Form.Control\n                placeholder='Đồ đang cần'\n                value={wishList}\n                onChange={({ target: { value } }) => setWishList(value)}\n              />\n            </Form.Group>\n            <Button type='submit' className='btn-block btn-warning ml-auto'>\n              Cập nhật\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n      <>\n        <h3 className='mt-2'>Xem trước bài đăng</h3>\n        <Row>\n          <Col lg={4} md={4}>\n            {/* <Image\n              style={{ borderRadius: '1.1em' }}\n              src={\n                !image\n                  ? 'https://placeimg.com/300/300/tech'\n                  : `${process.env.REACT_APP_IMAGE_URL_PREFIX}${image}`\n              }\n              alt={title}\n              fluid\n            ></Image> */}\n            <ImageBox image={image} />\n          </Col>\n          <Col lg={5} md={5}>\n            <ListGroup variant='flush'>\n              <ListGroup.Item as='h6' className='mb-0 py-2'>\n                {title || 'Tiêu đề'}\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <strong>Địa điểm: </strong>\n                {location}\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <strong>Thông tin chi tiết : </strong>\n                {description}\n              </ListGroup.Item>\n              <ListGroup.Item>\n                Đang có <strong>999</strong> người yêu cầu đổi\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <strong>Đồ đang cần: </strong>\n                {wishList}\n              </ListGroup.Item>\n            </ListGroup>\n          </Col>\n          <Col lg={3} md={3}>\n            <ListGroup>\n              <ListGroup.Item>\n                <Row>\n                  <Col>\n                    <strong>{`Người bán: ${userLogin.name}`}</strong>\n                  </Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>\n                    <strong>{`Đánh giá: `}</strong>\n                    <Rating value='5' text={` (5/5)`} />\n                  </Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>\n                    Nhận được <strong>999</strong> đánh giá từ{' '}\n                    <strong>999</strong> giao dịch thành công.\n                  </Col>\n                </Row>\n                <Button disabled className='btn-block my-3' variant='warning'>\n                  Yêu cầu đổi\n                </Button>\n              </ListGroup.Item>\n            </ListGroup>\n          </Col>\n        </Row>\n      </>\n    </>\n  )\n}\n","/Users/j/Desktop/swap-old-stuff/frontend/src/containers/Product/ProductCreate.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/containers/Home.js",[],["142","143"],"/Users/j/Desktop/swap-old-stuff/frontend/src/containers/RequestTo.js",["144","145","146","147","148","149"],"import { useEffect, useState } from 'react'\nimport { Alert, Button, ButtonGroup, Table } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport ImageBox from '../components/ImageBox'\nimport { fetchRequests } from '../redux/modules/product'\n\nexport default function RequestTo() {\n  const [isLogin, setIsLogin] = useState(false)\n  const [successFetch, setSuccessFetch] = useState(false)\n  const { user: userLogin } = useSelector((s) => s.user.userLogin)\n  useEffect(() => {\n    if (!userLogin || !userLogin._id) {\n      setIsLogin(false)\n    } else {\n      setIsLogin(true)\n    }\n  }, [userLogin])\n\n  const { loading, success, error, requests } = useSelector(\n    (s) => s.product.fetchRequests\n  )\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchRequests())\n  }, [dispatch])\n  // 1 get all products of userLogin._id === item.user\n  // 2 get all products tradeTo not null\n\n  const cancelRequestHandler = (e) => {\n    console.log('cancelRequestHandler...')\n  }\n  return (\n    <>\n      <Link className='btn btn-warning my-2' to='/'>\n        QUAY LẠI\n      </Link>\n      <h3>DANH SÁCH YÊU CẦU ĐỔI CỦA BẠN</h3>\n      {!requests || !requests.length ? (\n        <Alert variant='warning'>Bạn chưa có yêu cầu đổi nào cả !</Alert>\n      ) : (\n        <Table responsive striped hover>\n          <thead>\n            <tr>\n              <th>Món bị đổi</th>\n              <th>Hình</th>\n              <th>Tình trạng</th>\n              <th>Món bạn muốn</th>\n              <th>Hình</th>\n              <th>Chỉnh sửa</th>\n            </tr>\n          </thead>\n          <tbody>\n            {requests.map((item, _id) => (\n              <>\n                <tr>\n                  <td>{item.title}</td>\n                  <td>\n                    {/* <Image\n                      style={{ borderRadius: '1.1em', width: '250px' }}\n                      src={`${process.env.REACT_APP_IMAGE_URL_PREFIX}${item.image}`}\n                      alt={item.title}\n                      fluid\n                    ></Image> */}\n                    <ImageBox image={item.image} height='80px' />\n                  </td>\n                  <td>{item.tradeTo.status ? 'Chờ' : 'Đã hủy'}</td>\n                  <td>{item.tradeTo.title}</td>\n                  <td>\n                    {/* <Image\n                      style={{ borderRadius: '1.1em', width: '250px' }}\n                      src={`${process.env.REACT_APP_IMAGE_URL_PREFIX}${item.tradeTo.image}`}\n                      alt={item.tradeTo.title}\n                      fluid\n                    ></Image> */}\n                    <ImageBox image={item.tradeTo.image} height='80px' />\n                  </td>\n                  <td>\n                    <ButtonGroup aria-label='Basic example'>\n                      <Button\n                        variant='secondary'\n                        onClick={cancelRequestHandler}\n                      >\n                        Hủy\n                      </Button>\n                    </ButtonGroup>\n                  </td>\n                </tr>\n              </>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </>\n  )\n}\n",["150","151"],"/Users/j/Desktop/swap-old-stuff/frontend/src/containers/NotFound.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/containers/User/UserProfile.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/containers/User/UserRegister.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/containers/Product/ProductList.js",["152","153"],"import { useEffect } from 'react'\nimport { Button, ButtonGroup, Image, Table } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport ImageBox from '../../components/ImageBox'\nimport { fetchMyList } from '../../redux/modules/product'\n\nexport default function ProductList() {\n  const { user: userLogin } = useSelector((s) => s.user.userLogin)\n\n  const { error, loading, products } = useSelector(\n    (s) => s.product.myProductList\n  )\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(fetchMyList(userLogin._id, false))\n  }, [dispatch, userLogin])\n\n  return (\n    <>\n      <Link className='btn btn-warning my-2' to='/'>\n        QUAY LẠI\n      </Link>\n      <h3>DANH SÁCH ĐỒ CŨ CỦA BẠN</h3>\n\n      <Table responsive striped hover>\n        <thead>\n          <tr>\n            <th>Tiêu đề</th>\n            <th>Hình ảnh</th>\n            <th>Tình trạng</th>\n            <th>Số yêu cầu</th>\n            <th>Chỉnh sửa</th>\n          </tr>\n        </thead>\n        <tbody>\n          {products.map((item, _id) => (\n            <tr>\n              <td xs={4}>{item.title}</td>\n              <td>\n                {/* <Image\n                  style={{ borderRadius: '1.1em', width: '250px' }}\n                  src={`${process.env.REACT_APP_IMAGE_URL_PREFIX}${item.image}`}\n                  alt={item.title}\n                  fluid\n                ></Image> */}\n                <ImageBox image={item.image} height='80px' />\n              </td>\n              <td>\n                {!item.tradeTo\n                  ? 'Chưa đổi'\n                  : item.tradeTo.status\n                  ? 'Chờ'\n                  : 'Đã đổi'}\n              </td>\n              <td>\n                <Link to={`/products/${item._id}`}>\n                  <strong>{item.numRequests}</strong>\n                </Link>\n              </td>\n              <td>\n                <ButtonGroup aria-label='Basic example'>\n                  <Button variant='secondary' className='mr-1'>\n                    Hủy\n                  </Button>\n                  <Link\n                    className='btn btn-secondary'\n                    to={`/products/${item._id}/edit`}\n                  >\n                    Sửa\n                  </Link>\n                </ButtonGroup>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  )\n}\n","/Users/j/Desktop/swap-old-stuff/frontend/src/index.js",[],["154","155"],"/Users/j/Desktop/swap-old-stuff/frontend/src/redux/modules/reducer.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/redux/modules/product.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/components/Footer.js",[],["156","157"],"/Users/j/Desktop/swap-old-stuff/frontend/src/components/index.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/redux/modules/user.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/utils/convertTime.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/redux/store.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/components/CommentBox.js",["158","159","160"],"import { useEffect, useLayoutEffect, useState } from 'react'\nimport {\n  Alert,\n  Badge,\n  Button,\n  Col,\n  Form,\n  InputGroup,\n  ListGroup,\n  Row,\n  Spinner,\n  Toast,\n} from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  createComment,\n  CREATE_COMMENT_RESET,\n  fetchDetails,\n} from '../redux/modules/product'\nimport convertTime from '../utils/convertTime'\n\nexport default function CommentBox(props) {\n  const [isLogin, setIsLogin] = useState(false)\n  // If not login yet\n  const { user: userLogin } = useSelector((s) => s.user.userLogin)\n  useEffect(() => {\n    if (!userLogin || !userLogin._id) {\n      setIsLogin(false)\n    } else {\n      setIsLogin(true)\n    }\n  }, [userLogin])\n\n  // If logged in\n  const [text, setText] = useState('')\n\n  const [show, setShow] = useState(false)\n  const [message, setMessage] = useState(null)\n\n  const dispatch = useDispatch()\n  const { error, loading, product } = useSelector(\n    (s) => s.product.productDetails\n  )\n  const productId = props.id\n  const { numComments, comments, createdAt, user: sellerId, username } = product\n\n  const { success } = useSelector((s) => s.product.createComment)\n\n  const commentHandler = (e) => {\n    e.preventDefault()\n\n    if (!text) {\n      setMessage(\"You can't send empty message!\")\n      setShow(true)\n    } else {\n      const comment = {\n        name: userLogin.name,\n        text: text,\n        user: userLogin._id,\n      }\n      dispatch(createComment(productId, comment, numComments + 1))\n    }\n  }\n\n  useLayoutEffect(() => {\n    dispatch(fetchDetails(productId))\n  }, [dispatch, productId])\n\n  useLayoutEffect(() => {\n    if (success) {\n      setText('')\n      dispatch({ type: CREATE_COMMENT_RESET })\n    }\n  }, [dispatch, success])\n\n  return (\n    <>\n      <h3 className='my-2'>BÌNH LUẬN</h3>\n      <Row>\n        <Col lg={6} md={4}>\n          {loading ? (\n            <Spinner animation='border' variant='primary' />\n          ) : error ? (\n            <Alert variant='warning'>{error}</Alert>\n          ) : (\n            <>\n              {numComments ? (\n                <ListGroup variant='flush'>\n                  {comments.map((item) => (\n                    <ListGroup.Item>\n                      <Row>\n                        <Col lg={9}>\n                          {true && (\n                            <Badge\n                              pill\n                              variant='warning'\n                              as='span'\n                              className='text-dark font-weight-bold m-0 p-1'\n                            >\n                              seller\n                            </Badge>\n                          )}\n                          <strong className='ml-1'>{item.name}: </strong>\n                          <span>{item.text}</span>\n                        </Col>\n                        <Col lg={3} className='text-right'>\n                          <small>{convertTime(item.createdAt)}</small>\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              ) : (\n                <Alert variant='danger'>\n                  There is no comment. Be the first one by type below.\n                </Alert>\n              )}\n            </>\n          )}\n          {!isLogin ? (\n            <>\n              <Alert variant='info'>Please login to comment!</Alert>\n            </>\n          ) : (\n            <>\n              <Toast\n                onClose={() => setShow(false)}\n                show={show}\n                delay={2000}\n                autohide\n              >\n                <Toast.Header>\n                  <strong className='mr-auto'>{message}</strong>\n                </Toast.Header>\n              </Toast>\n              <Form onSubmit={commentHandler}>\n                <InputGroup className='mb-2 mr-sm-2'>\n                  <Form.Control\n                    id='comment'\n                    placeholder='Bình luận của bạn ...'\n                    value={text}\n                    onChange={({ target: { value } }) => setText(value)}\n                  />\n                  <Button type='submit' className='btn btn-warning ml-1'>\n                    Gửi\n                  </Button>\n                </InputGroup>\n              </Form>\n            </>\n          )}\n        </Col>\n      </Row>\n    </>\n  )\n}\n","/Users/j/Desktop/swap-old-stuff/frontend/src/components/SearchBox.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/components/TradeModal.js",["161","162"],"import { useEffect, useState } from 'react'\nimport { Button, Col, Container, Form, Modal, Row } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  createRequest,\n  fetchMyList,\n  fetchRequests,\n} from '../redux/modules/product'\nimport ImageBox from './ImageBox'\n\nconst TradeModel = ({ productTitle, productImage, productId, userId }) => {\n  const [giveAwayItemId, setGiveAwayItemId] = useState('')\n  const [giveAwayItem, setGiveAwayItem] = useState([])\n  const [show, setShow] = useState(false)\n\n  const { error, loading, products } = useSelector(\n    (s) => s.product.myProductList\n  )\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (show) {\n      dispatch(fetchMyList(userId, true))\n    }\n  }, [dispatch, show, userId])\n\n  const changeHandler = async ({ target: { value } }) => {\n    await setGiveAwayItemId(value)\n    const result = products.filter((item) => item._id === value)\n    await setGiveAwayItem(result)\n  }\n\n  const tradeHandler = async (e) => {\n    e.preventDefault()\n    await dispatch(\n      createRequest(giveAwayItemId, productImage, productTitle, productId)\n    )\n    await dispatch(fetchRequests())\n    await setShow(false)\n  }\n  return (\n    <>\n      <Button\n        className='btn-block'\n        variant='warning'\n        onClick={() => setShow(true)}\n      >\n        Đổi ngay\n      </Button>\n\n      <Modal\n        dialogClassName='modal-30w'\n        show={show}\n        onHide={() => setShow(false)}\n      >\n        <Form onSubmit={tradeHandler}>\n          {show && products.length ? (\n            <>\n              <Modal.Header closeButton>\n                <Modal.Title>Chọn món đồ bạn muốn đổi</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <Form.Group controlId='formGridState'>\n                  <Form.Control as='select' onChange={changeHandler}>\n                    <option selected>Choose ...</option>\n                    {products.map((item) => (\n                      <option value={item._id}>{item.title}</option>\n                    ))}\n                  </Form.Control>\n                </Form.Group>\n\n                {!giveAwayItem.length ? (\n                  <></>\n                ) : (\n                  <>\n                    <Container>\n                      <Row className='border-bottom py-1'>\n                        <Col xs md>\n                          <strong>Tiêu đề</strong>\n                        </Col>\n                        <Col xs={4} md={4}>\n                          <strong>Hình ảnh</strong>\n                        </Col>\n                      </Row>\n                      {giveAwayItem.map((item) => (\n                        <Row className='pt-2 pb-0'>\n                          <Col xs md>\n                            {item.title}\n                          </Col>\n                          <Col xs={4} md={4}>\n                            {/* <Image\n                              style={{ maxWidth: '160px', maxHeight: '99px' }}\n                              src={`${process.env.REACT_APP_IMAGE_URL_PREFIX}${item.image}`}\n                              alt={item.title}\n                              fluid\n                            ></Image> */}\n                            <ImageBox image={item.image} height='80px' />\n                          </Col>\n                        </Row>\n                      ))}\n                    </Container>\n                  </>\n                )}\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant='secondary' onClick={() => setShow(false)}>\n                  Hủy\n                </Button>\n                <Button variant='primary' type='submit'>\n                  Gửi\n                </Button>{' '}\n              </Modal.Footer>\n            </>\n          ) : (\n            <>\n              <Modal.Header closeButton>\n                <Modal.Title>Bạn chưa có gì để đổi cả !</Modal.Title>\n              </Modal.Header>\n              <Modal.Footer>\n                <Button variant='secondary' onClick={() => setShow(false)}>\n                  Tắt\n                </Button>\n              </Modal.Footer>\n            </>\n          )}\n        </Form>\n      </Modal>\n    </>\n  )\n}\n\nexport default TradeModel\n","/Users/j/Desktop/swap-old-stuff/frontend/src/components/ImageBox.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/redux/modules/transaction.js",[],"/Users/j/Desktop/swap-old-stuff/frontend/src/containers/TransactionList.js",["163","164","165","166","167","168"],"import { useEffect, useState } from 'react'\nimport { Alert, Button, ButtonGroup, Table } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport ImageBox from '../components/ImageBox'\nimport { fetchRequests } from '../redux/modules/product'\n\nexport default function TransactionList() {\n  const [isLogin, setIsLogin] = useState(false)\n  const [successFetch, setSuccessFetch] = useState(false)\n  const { user: userLogin } = useSelector((s) => s.user.userLogin)\n  useEffect(() => {\n    if (!userLogin || !userLogin._id) {\n      setIsLogin(false)\n    } else {\n      setIsLogin(true)\n    }\n  }, [userLogin])\n\n  const { loading, success, error, requests } = useSelector(\n    (s) => s.product.fetchRequests\n  )\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchRequests())\n  }, [dispatch])\n  // 1 get all products of userLogin._id === item.user\n  // 2 get all products tradeTo not null\n\n  const cancelRequestHandler = (e) => {\n    console.log('cancelRequestHandler...')\n  }\n  return (\n    <>\n      <Link className='btn btn-warning my-2' to='/'>\n        QUAY LẠI\n      </Link>\n      <h3>Your Transaction List</h3>\n      {!requests || !requests.length ? (\n        <Alert variant='warning'>Bạn chưa có yêu cầu đổi nào cả !</Alert>\n      ) : (\n        <Table responsive striped hover>\n          <thead>\n            <tr>\n              <th>Món bị đổi</th>\n              <th>Hình</th>\n              <th>Tình trạng</th>\n              <th>Món bạn muốn</th>\n              <th>Hình</th>\n              <th>Chỉnh sửa</th>\n            </tr>\n          </thead>\n          <tbody>\n            {requests.map((item, _id) => (\n              <>\n                <tr>\n                  <td>{item.title}</td>\n                  <td>\n                    {/* <Image\n                      style={{ borderRadius: '1.1em', width: '250px' }}\n                      src={`${process.env.REACT_APP_IMAGE_URL_PREFIX}${item.image}`}\n                      alt={item.title}\n                      fluid\n                    ></Image> */}\n                    <ImageBox image={item.image} height='80px' />\n                  </td>\n                  <td>{item.tradeTo.status ? 'Chờ' : 'Đã hủy'}</td>\n                  <td>{item.tradeTo.title}</td>\n                  <td>\n                    {/* <Image\n                      style={{ borderRadius: '1.1em', width: '250px' }}\n                      src={`${process.env.REACT_APP_IMAGE_URL_PREFIX}${item.tradeTo.image}`}\n                      alt={item.tradeTo.title}\n                      fluid\n                    ></Image> */}\n                    <ImageBox image={item.tradeTo.image} height='80px' />\n                  </td>\n                  <td>\n                    <ButtonGroup aria-label='Basic example'>\n                      <Button\n                        variant='secondary'\n                        onClick={cancelRequestHandler}\n                      >\n                        Hủy\n                      </Button>\n                    </ButtonGroup>\n                  </td>\n                </tr>\n              </>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </>\n  )\n}\n",{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"169","replacedBy":"173"},{"ruleId":"171","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":53,"column":5,"nodeType":"177","messageId":"178","endLine":53,"endColumn":13},{"ruleId":"175","severity":1,"message":"179","line":14,"column":11,"nodeType":"177","messageId":"178","endLine":14,"endColumn":16},{"ruleId":"175","severity":1,"message":"180","line":14,"column":18,"nodeType":"177","messageId":"178","endLine":14,"endColumn":25},{"ruleId":"169","replacedBy":"181"},{"ruleId":"171","replacedBy":"182"},{"ruleId":"175","severity":1,"message":"183","line":9,"column":10,"nodeType":"177","messageId":"178","endLine":9,"endColumn":17},{"ruleId":"175","severity":1,"message":"184","line":10,"column":10,"nodeType":"177","messageId":"178","endLine":10,"endColumn":22},{"ruleId":"175","severity":1,"message":"185","line":10,"column":24,"nodeType":"177","messageId":"178","endLine":10,"endColumn":39},{"ruleId":"175","severity":1,"message":"180","line":20,"column":11,"nodeType":"177","messageId":"178","endLine":20,"endColumn":18},{"ruleId":"175","severity":1,"message":"186","line":20,"column":20,"nodeType":"177","messageId":"178","endLine":20,"endColumn":27},{"ruleId":"175","severity":1,"message":"179","line":20,"column":29,"nodeType":"177","messageId":"178","endLine":20,"endColumn":34},{"ruleId":"169","replacedBy":"187"},{"ruleId":"171","replacedBy":"188"},{"ruleId":"175","severity":1,"message":"179","line":11,"column":11,"nodeType":"177","messageId":"178","endLine":11,"endColumn":16},{"ruleId":"175","severity":1,"message":"180","line":11,"column":18,"nodeType":"177","messageId":"178","endLine":11,"endColumn":25},{"ruleId":"169","replacedBy":"189"},{"ruleId":"171","replacedBy":"190"},{"ruleId":"169","replacedBy":"191"},{"ruleId":"171","replacedBy":"192"},{"ruleId":"175","severity":1,"message":"193","line":45,"column":34,"nodeType":"177","messageId":"178","endLine":45,"endColumn":43},{"ruleId":"175","severity":1,"message":"194","line":45,"column":51,"nodeType":"177","messageId":"178","endLine":45,"endColumn":59},{"ruleId":"175","severity":1,"message":"195","line":45,"column":61,"nodeType":"177","messageId":"178","endLine":45,"endColumn":69},{"ruleId":"175","severity":1,"message":"179","line":16,"column":11,"nodeType":"177","messageId":"178","endLine":16,"endColumn":16},{"ruleId":"175","severity":1,"message":"180","line":16,"column":18,"nodeType":"177","messageId":"178","endLine":16,"endColumn":25},{"ruleId":"175","severity":1,"message":"183","line":9,"column":10,"nodeType":"177","messageId":"178","endLine":9,"endColumn":17},{"ruleId":"175","severity":1,"message":"184","line":10,"column":10,"nodeType":"177","messageId":"178","endLine":10,"endColumn":22},{"ruleId":"175","severity":1,"message":"185","line":10,"column":24,"nodeType":"177","messageId":"178","endLine":10,"endColumn":39},{"ruleId":"175","severity":1,"message":"180","line":20,"column":11,"nodeType":"177","messageId":"178","endLine":20,"endColumn":18},{"ruleId":"175","severity":1,"message":"186","line":20,"column":20,"nodeType":"177","messageId":"178","endLine":20,"endColumn":27},{"ruleId":"175","severity":1,"message":"179","line":20,"column":29,"nodeType":"177","messageId":"178","endLine":20,"endColumn":34},"no-native-reassign",["196"],"no-negated-in-lhs",["197"],["196"],["197"],"no-unused-vars","'numLikes' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'loading' is assigned a value but never used.",["196"],["197"],"'isLogin' is assigned a value but never used.","'successFetch' is assigned a value but never used.","'setSuccessFetch' is assigned a value but never used.","'success' is assigned a value but never used.",["196"],["197"],["196"],["197"],["196"],["197"],"'createdAt' is assigned a value but never used.","'sellerId' is assigned a value but never used.","'username' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]